[[https://melpa.org/#/lsp-mode][file:https://melpa.org/packages/lsp-mode-badge.svg]]
[[https://stable.melpa.org/#/lsp-mode][file:https://stable.melpa.org/packages/lsp-mode-badge.svg]]
[[https://gitter.im/emacs-lsp/lsp-mode][file:https://badges.gitter.im/emacs-lsp/lsp-mode.svg]]
[[https://travis-ci.org/emacs-lsp/lsp-mode][file:https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master]]
[[https://coveralls.io/github/emacs-lsp/lsp-mode][https://coveralls.io/repos/github/emacs-lsp/lsp-mode/badge.svg]]

#+HTML: <img src="examples/logo.png" width="240" align="right">

* Language Server Protocol Support for Emacs
  #+caption: LSP mode
  [[file:examples/head.png]]

** Table of Contents                                      :TOC_4_gh:noexport:
- [[#language-server-protocol-support-for-emacs][Language Server Protocol Support for Emacs]]
  - [[#why][Why?]]
  - [[#overview][Overview]]
  - [[#presentationsdemos][Presentations/demos]]
  - [[#installation][Installation]]
  - [[#supported-languages][Supported languages]]
  - [[#keybindings][Keybindings]]
  - [[#checking-errors][Checking Errors]]
  - [[#settings][Settings]]
  - [[#extensions][Extensions]]
    - [[#tramp][TRAMP]]
      - [[#how-does-it-work][How does it work?]]
      - [[#sample-configuration][Sample configuration]]
      - [[#dealing-with-stderr][Dealing with stderr]]
  - [[#limitations][Limitations]]
    - [[#file-watches][File watches]]
  - [[#contributions][Contributions]]
    - [[#members][Members]]
  - [[#troubleshooting][Troubleshooting]]
  - [[#adding-support-for-languages][Adding support for languages]]
  - [[#faq][FAQ]]
  - [[#changelog][Changelog]]
  - [[#see-also][See also]]

** Why?
   - :heart: *Community Driven*
   - :gem: *Fully featured* - supports *all* features in Language Server Protocol v3.14.
   - :rocket: *Fast* - see [[https://emacs-lsp.github.io/lsp-mode/page/installation/#performance][performance section]]
   - :star2: *Flexible* - choose between full-blown IDE with flashy UI or minimal distraction free
   - :gear: *Easy to configure* - works out of the box and automatically upgrades if additional packages are present
** Overview
   Client for [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol]] (v3.14). [[https://emacs-lsp.github.io/lsp-mode][lsp-mode]] aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like ~company~, ~flycheck~ and ~projectile~.
   - Non-blocking asynchronous calls
   - Real-time Diagnostics/linting via [[https://github.com/flycheck/flycheck][flycheck]] (recommended) or ~flymake~ when Emacs > 26 (requires flymake>=1.0.5)
   - Code completion - ~company-capf~ / ~completion-at-point~ (note that [[https://github.com/tigersoldier/company-lsp][company-lsp]] is no longer supported).
   - Hovers - using [[https://emacs-lsp.github.io/lsp-ui][lsp-ui]]
   - Code actions - using ~lsp-execute-code-action~ or [[https://emacs-lsp.github.io/lsp-ui][lsp-ui]] sideline.
   - Code outline - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]] or ~helm-imenu~
   - Code navigation - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]], [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] tree views or [[https://emacs-lsp.github.io/lsp-ui][lsp-ui]] peek functions.
   - Code lens
   - Symbol highlights
   - Formatting
   - Debugger - [[https://emacs-lsp.github.io/dap-mode/][dap-mode]]
   - Helm integration - [[https://github.com/emacs-lsp/helm-lsp/][helm-lsp]]
   - Ivy integration - [[https://github.com/emacs-lsp/lsp-ivy/][lsp-ivy]]
   - Treemacs integration - [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]
   - Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. [[https://github.com/microsoft/vscode-languageserver-node/pull/367][Semantic highlighting spec]])
   - [[https://github.com/justbur/emacs-which-key/][which-key]] integration for better discovery
** Presentations/demos
   - [[https://github.com/skybert][skybert]]'s emacsconf [[https://media.emacsconf.org/2019/19.html][presentation]] (Java)
   - [[https://github.com/thatwist][thatwist]]'s ScalaUA Conference [[https://www.youtube.com/watch?v=x7ey0ifcqAg&feature=youtu.be][presentation]] (Scala)
** [[https://emacs-lsp.github.io/lsp-mode/page/installation][Installation]]
** [[https://emacs-lsp.github.io/lsp-mode/page/languages][Supported languages]]
** [[https://emacs-lsp.github.io/lsp-mode/page/keybindings][Keybindings]]
** Checking Errors
    To see all error statistics in the modeline you can enable
    ~lsp-diagnostics-modeline-mode~. This is especially useful for languages
    that compilation might be broken due to errors in other files(e. g. Java/Haskell).
     #+BEGIN_SRC elisp
       (with-eval-after-load 'lsp-mode
         ;; :project/:workspace/:file
         (setq lsp-diagnostics-modeline-scope :project)
         (add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode))
     #+END_SRC
     /Tip:/ To find out the global errors you might use ~lsp-treemacs-errors-list~.
** Settings
   - ~lsp-log-io~ - If non-nil, print all messages to and from the language server to ~*lsp-log*~.
   - ~lsp-print-performance~ - If non-nil, print performance info. to ~*lsp-log*~.
   - ~lsp-inhibit-message~ - If non-nil, inhibit the message echo via ~inhibit-message~.
   - ~lsp-report-if-no-buffer~ - If non nil the errors will be reported even when the file is not open.
   - ~lsp-keep-workspace-alive~ - If non nil keep workspace alive when the last workspace buffer is closed.
   - ~lsp-enable-snippet~ - Enable/disable snippet completion support.
   - ~lsp-auto-guess-root~ - Automatically guess the project root using projectile/project. Do *not* use this setting unless you are familiar with =lsp-mode= internals and you are sure that all of your projects are following =projectile=/=project.el= conventions.
   - ~lsp-restart~ - Defines how server exited event must be handled.
   - ~lsp-session-file~ - File where session information is stored.
   - ~lsp-auto-configure~ - Auto configure ~lsp-mode~. When set to t ~lsp-mode~ will auto-configure ~lsp-ui~ and ~company-lsp~.
   - ~lsp-document-sync-method~ - How to sync the document with the language server.
   - ~lsp-auto-execute-action~ - Auto-execute single action.
   - ~lsp-eldoc-render-all~ - Display all of the info returned by ~document/onHover~. If this is nil, ~eldoc~ will show only the symbol information.
   - ~lsp-enable-completion-at-point~ - Enable ~completion-at-point~ integration.
   - ~lsp-enable-xref~ - Enable xref integration.
   - ~lsp-diagnostic-package~ - Specifies which package to use for diagnostics. Choose from ~:auto~, ~:flycheck~, ~:flymake~ and ~:none~. Default is ~:auto~ which means use ~:flycheck~ if present.
   - ~lsp-enable-indentation~ - Indent regions using the file formatting functionality provided by the language server.
   - ~lsp-enable-on-type-formatting~ - Enable ~textDocument/onTypeFormatting~ integration.
   - ~lsp-before-save-edits~ - If non-nil, ~lsp-mode~ will apply edits suggested by the language server before saving a document.
   - ~lsp-imenu-show-container-name~ - Display the symbol's container name in an imenu entry.
   - ~lsp-imenu-container-name-separator~ - Separator string to use to separate the container name from the symbol while displaying imenu entries.
   - ~lsp-imenu-sort-methods~ - How to sort the imenu items. The value is a list of ~kind~, ~name~ or ~position~. Priorities are determined by the index of the element.
   - ~lsp-response-timeout~ - Number of seconds to wait for a response from the language server before timing out.
   - ~lsp-enable-file-watchers~ - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.
   - ~lsp-server-trace~ - Request trace mode on the language server.
   - ~lsp-semantic-highlighting~ - Enable experimental semantic highlighting support
   - ~lsp-enable-imenu~ - If non-nil, automatically enable imenu integration when server provides ~textDocument/documentSymbol~.
   - ~lsp-signature-auto-activate~ - Auto activate signature when trigger char is pressed.
   - ~lsp-signature-render-documentation~ - Include signature documentation in signature help.
   - ~lsp-enable-text-document-color~ - Enable ~textDocument/documentColor~ when server supports it.
** Extensions
*** TRAMP
    LSP mode has support for tramp buffers with the following requirements:
    - The language server has to be present on the remote server.
    - Having multi folder language server (like [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT LS]]) cannot have local and remote workspace folders.
**** How does it work?
     ~lsp-mode~ detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as ~:remote?~ t. Then ~lsp-mode~ starts the client through tramp.
**** Sample configuration
     Here it is example how you can configure python language server to work when using ~TRAMP~. Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. ~:request-handlers~, ~activation-fn~, etc).
     #+BEGIN_SRC elisp
       (lsp-register-client
        (make-lsp-client :new-connection (lsp-tramp-connection "<insert your LS's binary name or path here>")
                         :major-modes '(python-mode)
                         :remote? t
                         :server-id 'pyls-remote))
     #+END_SRC
**** Dealing with stderr
     With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the ~lsp-mode~ parser. As a workaround, ~lsp-mode~ is redirecting stderr to ~/tmp/<process-name>-<id>~stderr~.
** Limitations
*** File watches
    When some of the workspaces that are active in the current project requests file notifications via ~workspace/didChangeWatchedFiles~ ~lsp-mode~ will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via ~lsp-enable-file-watchers~ (you may use dir-locals).
** Contributions
   Contributions are very much welcome.

*** Members
    Here it is a list of the current =lsp-mode= members and what they are primary working on/responsible for.
    | Member         | Responsible for:                   |
    |----------------+------------------------------------|
    | [[https://github.com/TOTBWF][TOTBWF]]         | =F#=                               |
    | [[https://github.com/brotzeit][brotzeit]]       | =Rust=                             |
    | [[https://github.com/dsyzling][dsyzling]]       | =Scala=                            |
    | [[https://github.com/kurnevsky][kurnevsky]]      | =Scala= & =Rust=                   |
    | [[https://github.com/seagle0128][seagle0128]]     | =Go= & =MS Python Language Server= |
    | [[https://github.com/sebastiansturm][sebastiansturm]] | =lsp-mode= core & =C++=            |
    | [[https://github.com/vibhavp][vibhavp]]        | =lsp-mode= core                    |
    | [[https://github.com/yyoncho][yyoncho]]        | =lsp-mode= core & =Java=           |
    | [[https://github.com/ericdallo][ericdallo]]      | =Dart= & =Flutter=                 |

** Troubleshooting
   - check ~*lsp-log*~ buffer and verify that =lsp-mode= is able to find the
     server. If =lsp-mode= is unable to find the binary but it is on the path it
     is probably caused by the fact that emacs is running with different path.
     You may check the current path by executing =M-: (getenv "PATH")=. If this
     is the case, you have several options to fix the issue.
     - make sure that emacs is using the proper path by running emacs from terminal
     - Modify the path using =setpath=
     - Look for =lsp-mode= variable to customize server path. Usually, you may
       find the variable by doing =M-x customize-group RET
       lsp-LANGUAGE-SERVER-ID=.
   - set ~lsp-log-io~ to ~t~ to inspect communication between client and the server. Use =lsp-workspace-show-log= to switch to the corresponding log buffer.
   - ~lsp-describe-session~ will show the current projects roots + the started severs and allows inspecting the server capabilities.
   #+caption: Describe session
   [[file:examples/describe.png]]
** [[https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/][Adding support for languages]]
** [[https://emacs-lsp.github.io/lsp-mode/page/faq/][FAQ]]
** [[https://emacs-lsp.github.io/lsp-mode/page/CHANGELOG/][Changelog]]
** See also
   - [[https://github.com/emacs-lsp/lsp-docker/][lsp-docker]] - provide docker image with preconfigured language servers with corresponding emacs configuration.
   - [[https://github.com/sebastiencs/company-box/][company-box]] - =company= frontend with icons.
   - [[https://github.com/emacs-lsp/dap-mode][dap-mode]] - Debugger integration for ~lsp-mode~.
   - [[https://github.com/joaotavora/eglot][eglot]] - An alternative minimal LSP implementation.
   - [[https://github.com/justbur/emacs-which-key/][which-key]] - Emacs package that displays available keybindings in popup
   - [[https://github.com/bbatsov/projectile/][projectile]] - Project Interaction Library for Emacs
